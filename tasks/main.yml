---
# File: tasks/main.yml - Main tasks for Vault

- name: Include asserts
  include: asserts.yml

- name: "Add Vault user"
  user:
    name: "{{ vault_user }}"
    comment: "Vault user"
    group: "{{ vault_group }}"
    system: true
  when: vault_manage_user | bool

- name: Include OS-specific variables
  include_vars: "{{ ansible_os_family }}.yml"

- name: Check Vault installation
  command: which vault
  register: vault_installation
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: Get installed Vault version
  shell: "{{ vault_installation.stdout }} -version | cut -d' ' -f2 | tr -d 'v'"
  when: not vault_installation is failed
  changed_when: false
  check_mode: false
  register: installed_vault_version

- name: Compute if installation is required
  set_fact:
    installation_required: "{{ vault_installation is failed or installed_vault_version.stdout != vault_version }}"

- name: Install OS packages and Vault Enterprise via control host
  include: install_enterprise.yml
  when:
    - vault_enterprise | bool
    - not vault_install_remotely | bool
    - installation_required | bool

- name: Install OS packages and Vault via control host
  include: install.yml
  when:
    - not vault_enterprise | bool
    - not vault_install_remotely | bool
    - installation_required | bool

- name: Install OS packages and Vault via remote hosts
  include: install_remote.yml
  when:
    - not vault_enterprise | bool
    - vault_install_remotely | bool
    - installation_required | bool

- name: Check Vault mlock capability
  command: "setcap -v cap_ipc_lock=+ep {{ vault_bin_path }}/vault"
  changed_when: false  # read-only task
  ignore_errors: true
  register: vault_mlock_capability

- name: Enable non root mlock capability
  command: "setcap cap_ipc_lock=+ep {{ vault_bin_path }}/vault"
  when: vault_mlock_capability is failed

- name: Create directories
  file:
    dest: "{{ item }}"
    state: directory
    owner: "{{ vault_user }}"
    group: "{{ vault_group}}"
  with_items:
    - "{{ vault_config_path }}"
    - "{{ vault_data_path }}"
    - "{{ vault_log_path }}"
    - "{{ vault_run_path }}"

- name: Enable logrotate for vault
  template:
    src: "{{ vault_logrotate_template }}"
    dest: /etc/logrotate.d/vault
    owner: root
    group: root
    mode: 0644
  when: vault_enable_logrotate

- name: TLS configuration
  include: ../tasks/tls.yml
  when: vault_tls_disable == 0

- name: "Copy over GCP Credentials for Auto Unseal"
  copy:
    src: "{{ vault_gkms_credentials_src_file }}"
    dest: "{{ vault_gkms_credentials }}"
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: "0600"
  when: vault_gkms | bool

- name: Listener configuration
  template:
    src: "{{ vault_listener_template }}"
    dest: "{{ vault_main_config }}"
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: "0400"
  notify: Restart vault


- name: BSD init script
  template:
    src: "{{ vault_bsdinit_template }}"
    dest: /etc/rc.d/vault
    owner: root
    group: wheel
    mode: "0755"
  when: ansible_os_family == "FreeBSD"

- name: SYSV init script
  template:
    src: "{{ vault_sysvinit_template }}"
    dest: /etc/init.d/vault
    owner: root
    group: root
    mode: "0755"
  when:
    - not ansible_service_mgr == "systemd"
    - not ansible_os_family == "Debian"
    - not ansible_os_family == "FreeBSD"
    - not ansible_os_family == "Solaris"

- name: Debian init script
  template:
    src: "{{ vault_debian_init_template }}"
    dest: /etc/init.d/vault
    owner: root
    group: root
    mode: "0755"
  when:
    - not ansible_service_mgr == "systemd"
    - ansible_os_family == "Debian"
    - not ansible_os_family == "FreeBSD"
    - not ansible_os_family == "Solaris"

- name: extract systemd version
  shell: systemctl --version systemd | head -n 1 | cut -d' ' -f2
  changed_when: false
  check_mode: false
  register: systemd_version
  when:
    - ansible_service_mgr == "systemd"
    - not ansible_os_family == "FreeBSD"
    - not ansible_os_family == "Solaris"

- name: systemd unit
  template:
    src: "{{ vault_systemd_template }}"
    dest: /lib/systemd/system/vault.service
    owner: root
    group: root
    mode: "0644"
  when:
    - ansible_service_mgr == "systemd"
    - not ansible_os_family == "FreeBSD"
    - not ansible_os_family == "Solaris"
    - systemd_version is defined

- name: Start Vault
  service:
    name: vault
    state: started
    enabled: true

- name: Restart Vault if needed
  meta: flush_handlers

# This should succeed regardless of seal state
- name: Vault API reachable?
  uri:
    validate_certs: "{{ vault_validate_certs_during_api_reachable_check | bool }}"
    # url: "{{ vault_api_addr }}/v1/sys/health"
    url: "{{ vault_tls_disable | ternary('http', 'https') }}://{{ (vault_address == '0.0.0.0') | ternary('127.0.0.1', vault_address) }}:{{ vault_port }}/v1/sys/health"
    method: GET
    # 200 if initialized, unsealed, and active.
    # 429 is also OK for HA cluster (means standby + unsealed in HA)
    # 473 is also OK for Performance Standby (Enterprise feature)
    # See: https://www.vaultproject.io/api/system/health.html
    status_code: "{{ vault_cluster_disable | ternary('200', '200, 429, 473') }}"
    body_format: json
  register: check_result
  retries: 30
  until: check_result is succeeded
  delay: 10
  changed_when: false
